<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="3" hostname="type-v2" name="pytest" skipped="0" tests="13" time="0.215" timestamp="2020-05-03T15:17:35.463248"><testcase classname="matrix_tools.tests.test_matrix_tools.TestMatrixTools" name="test_numpy_version" time="0.001"></testcase><testcase classname="matrix_tools.tests.test_matrix_tools.TestMatrixTools" name="test_addition_exact[a0-b0-expected0]" time="0.001"></testcase><testcase classname="matrix_tools.tests.test_matrix_tools.TestMatrixTools" name="test_addition_exact[a1-b1-expected1]" time="0.003"><failure message="assert False
 +  where False = &lt;built-in method all of numpy.ndarray object at 0x7f28303628a0&gt;()
 +    where &lt;built-in method all of numpy.ndarray object at 0x7f28303628a0&gt; = array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]]) == array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]])
      +array([[0.3, 3. , 5. ],\n
      +       [3. , 4. , 5. ],\n
      +       [5. , 5. , 5. ]])
      -array([[0.3, 3. , 5. ],\n
      -       [3. , 4. , 5. ],\n
      -       [5. , 5. , 5. ]])
      Full diff:
        array([[0.3, 3. , 5. ],
               [3. , 4. , 5. ],
               [5. , 5. , 5. ]],
        ).all">self = &lt;matrix_tools.tests.test_matrix_tools.TestMatrixTools object at 0x7f28303502b0&gt;, a = array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
b = array([[ 0.3,  2. ,  3. ],
       [ 0. ,  0. ,  0. ],
       [-1. , -2. , -3. ]]), expected = array([[0.3, 3. , 5. ],
       [3. , 4. , 5. ],
       [5. , 5. , 5. ]])

    @pytest.mark.parametrize(&quot;a,b,expected&quot;,[(a1,b1,expected1),(a2,b2,expected2)])
    def test_addition_exact(self,a,b,expected):
        &quot;&quot;&quot;
        Tests the addition of 2 matrices by exact comparison
        &quot;&quot;&quot;
        actual = add_matrices(a,b)
&gt;       assert((expected == actual).all())
E       assert False
E        +  where False = &lt;built-in method all of numpy.ndarray object at 0x7f28303628a0&gt;()
E        +    where &lt;built-in method all of numpy.ndarray object at 0x7f28303628a0&gt; = array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]]) == array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]])
E             +array([[0.3, 3. , 5. ],\n
E             +       [3. , 4. , 5. ],\n
E             +       [5. , 5. , 5. ]])
E             -array([[0.3, 3. , 5. ],\n
E             -       [3. , 4. , 5. ],\n
E             -       [5. , 5. , 5. ]])
E             Full diff:
E               array([[0.3, 3. , 5. ],
E                      [3. , 4. , 5. ],
E                      [5. , 5. , 5. ]],
E               ).all

matrix_tools/tests/test_matrix_tools.py:47: AssertionError</failure></testcase><testcase classname="matrix_tools.tests.test_matrix_tools.TestMatrixTools" name="test_addition_close[a0-b0-expected0]" time="0.001"></testcase><testcase classname="matrix_tools.tests.test_matrix_tools.TestMatrixTools" name="test_addition_close[a1-b1-expected1]" time="0.001"></testcase><testcase classname="tests.test_matrix_operations" name="test_numpy_version" time="0.000"></testcase><testcase classname="tests.test_matrix_operations" name="test_addition_exact" time="0.002"><failure message="assert False
 +  where False = &lt;built-in method all of numpy.ndarray object at 0x7f28193a92b0&gt;()
 +    where &lt;built-in method all of numpy.ndarray object at 0x7f28193a92b0&gt; = array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]]) == array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]])
      +array([[0.3, 3. , 5. ],\n
      +       [3. , 4. , 5. ],\n
      +       [5. , 5. , 5. ]])
      -array([[0.3, 3. , 5. ],\n
      -       [3. , 4. , 5. ],\n
      -       [5. , 5. , 5. ]])
      Full diff:
        array([[0.3, 3. , 5. ],
               [3. , 4. , 5. ],
               [5. , 5. , 5. ]],
        ).all">def test_addition_exact():
        &quot;&quot;&quot;
        Tests the addition of 2 matrices by exact comparison
        &quot;&quot;&quot;
        actual = a + b
&gt;       assert((expected == actual).all())
E       assert False
E        +  where False = &lt;built-in method all of numpy.ndarray object at 0x7f28193a92b0&gt;()
E        +    where &lt;built-in method all of numpy.ndarray object at 0x7f28193a92b0&gt; = array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]]) == array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]])
E             +array([[0.3, 3. , 5. ],\n
E             +       [3. , 4. , 5. ],\n
E             +       [5. , 5. , 5. ]])
E             -array([[0.3, 3. , 5. ],\n
E             -       [3. , 4. , 5. ],\n
E             -       [5. , 5. , 5. ]])
E             Full diff:
E               array([[0.3, 3. , 5. ],
E                      [3. , 4. , 5. ],
E                      [5. , 5. , 5. ]],
E               ).all

tests/test_matrix_operations.py:28: AssertionError</failure></testcase><testcase classname="tests.test_matrix_operations" name="test_addition_close" time="0.001"></testcase><testcase classname="tests.test_matrix_operations_param" name="test_numpy_version" time="0.000"></testcase><testcase classname="tests.test_matrix_operations_param" name="test_addition_exact[a0-b0-expected0]" time="0.001"></testcase><testcase classname="tests.test_matrix_operations_param" name="test_addition_exact[a1-b1-expected1]" time="0.003"><failure message="assert False
 +  where False = &lt;built-in method all of numpy.ndarray object at 0x7f28193b9800&gt;()
 +    where &lt;built-in method all of numpy.ndarray object at 0x7f28193b9800&gt; = array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]]) == array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]])
      +array([[0.3, 3. , 5. ],\n
      +       [3. , 4. , 5. ],\n
      +       [5. , 5. , 5. ]])
      -array([[0.3, 3. , 5. ],\n
      -       [3. , 4. , 5. ],\n
      -       [5. , 5. , 5. ]])
      Full diff:
        array([[0.3, 3. , 5. ],
               [3. , 4. , 5. ],
               [5. , 5. , 5. ]],
        ).all">a = array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]]), b = array([[ 0.3,  2. ,  3. ],
       [ 0. ,  0. ,  0. ],
       [-1. , -2. , -3. ]])
expected = array([[0.3, 3. , 5. ],
       [3. , 4. , 5. ],
       [5. , 5. , 5. ]])

    @pytest.mark.parametrize(&quot;a,b,expected&quot;,[(a1,b1,expected1),(a2,b2,expected2)])
    def test_addition_exact(a,b,expected):
        &quot;&quot;&quot;
        Tests the addition of 2 matrices by exact comparison
        &quot;&quot;&quot;
        actual = a + b
&gt;       assert((expected == actual).all())
E       assert False
E        +  where False = &lt;built-in method all of numpy.ndarray object at 0x7f28193b9800&gt;()
E        +    where &lt;built-in method all of numpy.ndarray object at 0x7f28193b9800&gt; = array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]]) == array([[0.3, 3. , 5. ],\n       [3. , 4. , 5. ],\n       [5. , 5. , 5. ]])
E             +array([[0.3, 3. , 5. ],\n
E             +       [3. , 4. , 5. ],\n
E             +       [5. , 5. , 5. ]])
E             -array([[0.3, 3. , 5. ],\n
E             -       [3. , 4. , 5. ],\n
E             -       [5. , 5. , 5. ]])
E             Full diff:
E               array([[0.3, 3. , 5. ],
E                      [3. , 4. , 5. ],
E                      [5. , 5. , 5. ]],
E               ).all

tests/test_matrix_operations_param.py:42: AssertionError</failure></testcase><testcase classname="tests.test_matrix_operations_param" name="test_addition_close[a0-b0-expected0]" time="0.001"></testcase><testcase classname="tests.test_matrix_operations_param" name="test_addition_close[a1-b1-expected1]" time="0.001"></testcase></testsuite></testsuites>